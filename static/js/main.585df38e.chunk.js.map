{"version":3,"sources":["graph-config.js","Graph.js","App.js","serviceWorker.js","index.js"],"names":["graph_config","NodeTypes","empty","typeText","shapeId","shape","react_default","a","createElement","viewBox","id","cx","cy","r","special","transform","width","height","NodeSubtypes","specialChild","x","y","fill","EdgeTypes","emptyEdge","specialEdge","styles","graph","NODE_KEY","EMPTY_TYPE","SPECIAL_TYPE","EMPTY_EDGE_TYPE","SPECIAL_EDGE_TYPE","sample","nodes","title","type","subtype","edges","source","target","Graph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getViewNode","nodeKey","searchNode","i","getNodeIndex","state","onUpdateNode","viewNode","setState","onSelectNode","selected","onSelectEdge","viewEdge","onCreateNode","Math","random","length","push","onDeleteNode","splice","newEdges","filter","edge","onCreateEdge","sourceViewNode","targetViewNode","onSwapEdge","getEdgeIndex","JSON","parse","stringify","onDeleteEdge","findIndex","node","searchEdge","GraphConfig","style","dist_default","ref","emptyType","nodeTypes","nodeSubtypes","edgeTypes","Component","App","className","src_Graph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAkDeA,EAAA,CACbC,UAAW,CACTC,MAAO,CACLC,SAAU,OACVC,QAAS,SACTC,MAjDJC,EAAAC,EAAAC,cAAA,UAAQC,QAAQ,cAAcC,GAAG,SAC/BJ,EAAAC,EAAAC,cAAA,UAAQG,GAAG,KAAKC,GAAG,KAAKC,EAAE,SAkD1BC,QAAS,CACPX,SAAU,UACVC,QAAS,WACTC,MAhDJC,EAAAC,EAAAC,cAAA,UAAQC,QAAQ,cAAcC,GAAG,WAC/BJ,EAAAC,EAAAC,cAAA,QAAMO,UAAU,2BAA2BC,MAAM,KAAKC,OAAO,UAkD/DC,aAAc,CACZC,aAAc,CACZf,QAAS,gBACTC,MAhDJC,EAAAC,EAAAC,cAAA,UAAQC,QAAQ,cAAcC,GAAG,gBAC/BJ,EAAAC,EAAAC,cAAA,QACEY,EAAE,MACFC,EAAE,IACFL,MAAM,KACNC,OAAO,OACPK,KAAK,gCA6CTC,UAAW,CACTC,UAAW,CACTpB,QAAS,aACTC,MA1CJC,EAAAC,EAAAC,cAAA,UAAQC,QAAQ,YAAYC,GAAG,aAC7BJ,EAAAC,EAAAC,cAAA,UAAQG,GAAG,KAAKC,GAAG,KAAKC,EAAE,IAAIS,KAAK,gBAChC,OA0CHG,YAAa,CACXrB,QAAS,eACTC,MAtCJC,EAAAC,EAAAC,cAAA,UAAQC,QAAQ,YAAYC,GAAG,eAC7BJ,EAAAC,EAAAC,cAAA,QACEO,UAAU,aACVK,EAAE,KACFC,EAAE,OACFL,MAAM,KACNC,OAAO,KACPK,KAAK,qBCxCLI,EAAS,CACbC,MAAO,CACLV,OAAQ,OACRD,MAAO,SAILY,EAAW,KAKXC,EAAa,QACbC,EAAe,UAEfC,EAAkB,YAClBC,EAAoB,cAKpBC,EAAS,CACbC,MAAO,CACL,CACExB,GAAI,EACJyB,MAAO,SACPf,EAAG,kBACHC,EAAG,kBACHe,KAAMN,GAER,CACEpB,GAAI,EACJyB,MAAO,SACPf,EAAG,kBACHC,EAAG,kBACHe,KAAMP,EACNQ,QAtBwB,gBAwB1B,CACE3B,GAAI,EACJyB,MAAO,SACPf,EAAG,kBACHC,EAAG,kBACHe,KAAMP,GAER,CACEnB,GAAI,EACJyB,MAAO,SACPf,EAAG,kBACHC,EAAG,kBACHe,KAAMP,IAGVS,MAAO,CACL,CACEC,OAAQ,EACRC,OAAQ,EACRJ,KAAMJ,GAER,CACEO,OAAQ,EACRC,OAAQ,EACRJ,KAAML,KA4LGU,cAtLb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAwBRQ,YAAc,SAAAC,GACZ,IAAMC,EAAa,GACnBA,EAAWxB,GAAYuB,EACvB,IAAME,EAAIV,EAAKW,aAAaF,GAC5B,OAAOT,EAAKY,MAAM5B,MAAMO,MAAMmB,IA7BbV,EAsCnBa,aAAe,SAAAC,GACb,IAAM9B,EAAQgB,EAAKY,MAAM5B,MACnB0B,EAAIV,EAAKW,aAAaG,GAE5B9B,EAAMO,MAAMmB,GAAKI,EACjBd,EAAKe,SAAS,CAAE/B,MAAOA,KA3CNgB,EA+CnBgB,aAAe,SAAAF,GAEPA,EACJd,EAAKe,SAAS,CAAEE,SAAUH,IAE1Bd,EAAKe,SAAS,CAAEE,SAAU,MApDXjB,EAyDnBkB,aAAe,SAAAC,GACbnB,EAAKe,SAAS,CAAEE,SAAUE,KA1DTnB,EA8DnBoB,aAAe,SAAC3C,EAAGC,GACjB,IAAMM,EAAQgB,EAAKY,MAAM5B,MAMnBS,EAAO4B,KAAKC,SAAW,IAAOnC,EAAeD,EAE7C4B,EAAW,CACf/C,GAAIiC,EAAKY,MAAM5B,MAAMO,MAAMgC,OAAS,EACpC/B,MAAO,GACPC,KAAMA,EACNhB,EAAGA,EACHC,EAAGA,GAGLM,EAAMO,MAAMiC,KAAKV,GACjBd,EAAKe,SAAS,CAAE/B,MAAOA,KAhFNgB,EAoFnByB,aAAe,SAAAX,GACb,IAAM9B,EAAQgB,EAAKY,MAAM5B,MACnB0B,EAAIV,EAAKW,aAAaG,GAC5B9B,EAAMO,MAAMmC,OAAOhB,EAAG,GAGtB,IAAMiB,EAAW3C,EAAMW,MAAMiC,OAAO,SAACC,EAAMnB,GACzC,OACEmB,EAAKjC,SAAWkB,EAAS7B,IAAa4C,EAAKhC,SAAWiB,EAAS7B,KAInED,EAAMW,MAAQgC,EAEd3B,EAAKe,SAAS,CAAE/B,MAAOA,EAAOiC,SAAU,MAlGvBjB,EAsGnB8B,aAAe,SAACC,EAAgBC,GAC9B,IAAMhD,EAAQgB,EAAKY,MAAM5B,MAInBS,EACJsC,EAAetC,OAASN,EACpBE,EACAD,EAEA+B,EAAW,CACfvB,OAAQmC,EAAe9C,GACvBY,OAAQmC,EAAe/C,GACvBQ,KAAMA,GAIJ0B,EAASvB,SAAWuB,EAAStB,SAC/Bb,EAAMW,MAAM6B,KAAKL,GACjBnB,EAAKe,SAAS,CAAE/B,MAAOA,MAzHRgB,EA8HnBiC,WAAa,SAACF,EAAgBC,EAAgBb,GAC5C,IAAMnC,EAAQgB,EAAKY,MAAM5B,MACnB0B,EAAIV,EAAKkC,aAAaf,GACtBU,EAAOM,KAAKC,MAAMD,KAAKE,UAAUrD,EAAMW,MAAMe,KAEnDmB,EAAKjC,OAASmC,EAAe9C,GAC7B4C,EAAKhC,OAASmC,EAAe/C,GAC7BD,EAAMW,MAAMe,GAAKmB,EAEjB7B,EAAKe,SAAS,CAAE/B,MAAOA,KAvINgB,EA2InBsC,aAAe,SAAAnB,GACb,IAAMnC,EAAQgB,EAAKY,MAAM5B,MACnB0B,EAAIV,EAAKkC,aAAaf,GAC5BnC,EAAMW,MAAM+B,OAAOhB,EAAG,GACtBV,EAAKe,SAAS,CAAE/B,MAAOA,EAAOiC,SAAU,MA5IxCjB,EAAKY,MAAQ,CACX5B,MAAOM,EACP2B,SAAU,IALKjB,4EASNS,GACX,OAAON,KAAKS,MAAM5B,MAAMO,MAAMgD,UAAU,SAAAC,GACtC,OAAOA,EAAKvD,KAAcwB,EAAWxB,0CAK5BwD,GACX,OAAOtC,KAAKS,MAAM5B,MAAMW,MAAM4C,UAAU,SAAAV,GACtC,OACEA,EAAKjC,SAAW6C,EAAW7C,QAAUiC,EAAKhC,SAAW4C,EAAW5C,0CAgIpE,IAAMN,EAAQY,KAAKS,MAAM5B,MAAMO,MACzBI,EAAQQ,KAAKS,MAAM5B,MAAMW,MACzBsB,EAAWd,KAAKS,MAAMK,SAEtB3D,EAAYoF,EAAYpF,UACxBiB,EAAemE,EAAYnE,aAC3BK,EAAY8D,EAAY9D,UAE9B,OACEjB,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QAAQ4E,MAAO5D,EAAOC,OAC5BrB,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CACEiF,IAAI,YACJrC,QAASvB,EACT6D,UAAW5D,EACXK,MAAOA,EACPI,MAAOA,EACPsB,SAAUA,EACV8B,UAAWzF,EACX0F,aAAczE,EACd0E,UAAWrE,EACX2B,YAAaJ,KAAKI,YAClBS,aAAcb,KAAKa,aACnBI,aAAcjB,KAAKiB,aACnBP,aAAcV,KAAKU,aACnBY,aAActB,KAAKsB,aACnBP,aAAcf,KAAKe,aACnBY,aAAc3B,KAAK2B,aACnBG,WAAY9B,KAAK8B,WACjBK,aAAcnC,KAAKmC,uBAhLTY,aC1DLC,0LARX,OACExF,EAAAC,EAAAC,cAAA,OAAKuF,UAAU,OACbzF,EAAAC,EAAAC,cAACwF,EAAD,cAJUH,cCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.585df38e.chunk.js","sourcesContent":["/*\n  Example config for GraphView component\n*/\nimport React from \"react\";\n\nconst EmptyShape = (\n  <symbol viewBox=\"0 0 100 100\" id=\"empty\">\n    <circle cx=\"50\" cy=\"50\" r=\"45\" />\n  </symbol>\n);\n\nconst SpecialShape = (\n  <symbol viewBox=\"0 0 100 100\" id=\"special\">\n    <rect transform=\"translate(50) rotate(45)\" width=\"70\" height=\"70\" />\n  </symbol>\n);\n\nconst SpecialChildShape = (\n  <symbol viewBox=\"0 0 100 100\" id=\"specialChild\">\n    <rect\n      x=\"2.5\"\n      y=\"0\"\n      width=\"95\"\n      height=\"97.5\"\n      fill=\"rgba(30, 144, 255, 0.12)\"\n    />\n  </symbol>\n);\n\nconst EmptyEdgeShape = (\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\">\n      {\" \"}\n    </circle>\n  </symbol>\n);\n\nconst SpecialEdgeShape = (\n  <symbol viewBox=\"0 0 50 50\" id=\"specialEdge\">\n    <rect\n      transform=\"rotate(45)\"\n      x=\"25\"\n      y=\"-4.5\"\n      width=\"15\"\n      height=\"15\"\n      fill=\"currentColor\"\n    />\n  </symbol>\n);\n\nexport default {\n  NodeTypes: {\n    empty: {\n      typeText: \"None\",\n      shapeId: \"#empty\",\n      shape: EmptyShape\n    },\n    special: {\n      typeText: \"Special\",\n      shapeId: \"#special\",\n      shape: SpecialShape\n    }\n  },\n  NodeSubtypes: {\n    specialChild: {\n      shapeId: \"#specialChild\",\n      shape: SpecialChildShape\n    }\n  },\n  EdgeTypes: {\n    emptyEdge: {\n      shapeId: \"#emptyEdge\",\n      shape: EmptyEdgeShape\n    },\n    specialEdge: {\n      shapeId: \"#specialEdge\",\n      shape: SpecialEdgeShape\n    }\n  }\n};\n","import React, { Component } from \"react\";\nimport GraphView from \"react-digraph\";\n\nimport GraphConfig from \"./graph-config.js\"; // Configures node/edge types\n\nconst styles = {\n  graph: {\n    height: \"100%\",\n    width: \"100%\"\n  }\n};\n\nconst NODE_KEY = \"id\"; // Key used to identify nodes\n\n// These keys are arbitrary (but must match the config)\n// However, GraphView renders text differently for empty types\n// so this has to be passed in if that behavior is desired.\nconst EMPTY_TYPE = \"empty\"; // Empty node type\nconst SPECIAL_TYPE = \"special\";\nconst SPECIAL_CHILD_SUBTYPE = \"specialChild\";\nconst EMPTY_EDGE_TYPE = \"emptyEdge\";\nconst SPECIAL_EDGE_TYPE = \"specialEdge\";\n\n// NOTE: Edges must have 'source' & 'target' attributes\n// In a more realistic use case, the graph would probably originate\n// elsewhere in the App or be generated from some other state upstream of this component.\nconst sample = {\n  nodes: [\n    {\n      id: 1,\n      title: \"Node A\",\n      x: 258.3976135253906,\n      y: 331.9783248901367,\n      type: SPECIAL_TYPE\n    },\n    {\n      id: 2,\n      title: \"Node B\",\n      x: 593.9393920898438,\n      y: 260.6060791015625,\n      type: EMPTY_TYPE,\n      subtype: SPECIAL_CHILD_SUBTYPE\n    },\n    {\n      id: 3,\n      title: \"Node C\",\n      x: 237.5757598876953,\n      y: 61.81818389892578,\n      type: EMPTY_TYPE\n    },\n    {\n      id: 4,\n      title: \"Node C\",\n      x: 600.5757598876953,\n      y: 600.81818389892578,\n      type: EMPTY_TYPE\n    }\n  ],\n  edges: [\n    {\n      source: 1,\n      target: 2,\n      type: SPECIAL_EDGE_TYPE\n    },\n    {\n      source: 2,\n      target: 4,\n      type: EMPTY_EDGE_TYPE\n    }\n  ]\n};\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: sample,\n      selected: {}\n    };\n  }\n  // Helper to find the index of a given node\n  getNodeIndex(searchNode) {\n    return this.state.graph.nodes.findIndex(node => {\n      return node[NODE_KEY] === searchNode[NODE_KEY];\n    });\n  }\n\n  // Helper to find the index of a given edge\n  getEdgeIndex(searchEdge) {\n    return this.state.graph.edges.findIndex(edge => {\n      return (\n        edge.source === searchEdge.source && edge.target === searchEdge.target\n      );\n    });\n  }\n\n  // Given a nodeKey, return the corresponding node\n  getViewNode = nodeKey => {\n    const searchNode = {};\n    searchNode[NODE_KEY] = nodeKey;\n    const i = this.getNodeIndex(searchNode);\n    return this.state.graph.nodes[i];\n  };\n\n  /*\n   * Handlers/Interaction\n   */\n\n  // Called by 'drag' handler, etc..\n  // to sync updates from D3 with the graph\n  onUpdateNode = viewNode => {\n    const graph = this.state.graph;\n    const i = this.getNodeIndex(viewNode);\n\n    graph.nodes[i] = viewNode;\n    this.setState({ graph: graph });\n  };\n\n  // Node 'mouseUp' handler\n  onSelectNode = viewNode => {\n    // Deselect events will send Null viewNode\n    if (!!viewNode) {\n      this.setState({ selected: viewNode });\n    } else {\n      this.setState({ selected: {} });\n    }\n  };\n\n  // Edge 'mouseUp' handler\n  onSelectEdge = viewEdge => {\n    this.setState({ selected: viewEdge });\n  };\n\n  // Updates the graph with a new node\n  onCreateNode = (x, y) => {\n    const graph = this.state.graph;\n\n    // This is just an example - any sort of logic\n    // could be used here to determine node type\n    // There is also support for subtypes. (see 'sample' above)\n    // The subtype geometry will underlay the 'type' geometry for a node\n    const type = Math.random() < 0.25 ? SPECIAL_TYPE : EMPTY_TYPE;\n\n    const viewNode = {\n      id: this.state.graph.nodes.length + 1,\n      title: \"\",\n      type: type,\n      x: x,\n      y: y\n    };\n\n    graph.nodes.push(viewNode);\n    this.setState({ graph: graph });\n  };\n\n  // Deletes a node from the graph\n  onDeleteNode = viewNode => {\n    const graph = this.state.graph;\n    const i = this.getNodeIndex(viewNode);\n    graph.nodes.splice(i, 1);\n\n    // Delete any connected edges\n    const newEdges = graph.edges.filter((edge, i) => {\n      return (\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\n      );\n    });\n\n    graph.edges = newEdges;\n\n    this.setState({ graph: graph, selected: {} });\n  };\n\n  // Creates a new node between two edges\n  onCreateEdge = (sourceViewNode, targetViewNode) => {\n    const graph = this.state.graph;\n\n    // This is just an example - any sort of logic\n    // could be used here to determine edge type\n    const type =\n      sourceViewNode.type === SPECIAL_TYPE\n        ? SPECIAL_EDGE_TYPE\n        : EMPTY_EDGE_TYPE;\n\n    const viewEdge = {\n      source: sourceViewNode[NODE_KEY],\n      target: targetViewNode[NODE_KEY],\n      type: type\n    };\n\n    // Only add the edge when the source node is not the same as the target\n    if (viewEdge.source !== viewEdge.target) {\n      graph.edges.push(viewEdge);\n      this.setState({ graph: graph });\n    }\n  };\n\n  // Called when an edge is reattached to a different target.\n  onSwapEdge = (sourceViewNode, targetViewNode, viewEdge) => {\n    const graph = this.state.graph;\n    const i = this.getEdgeIndex(viewEdge);\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\n\n    edge.source = sourceViewNode[NODE_KEY];\n    edge.target = targetViewNode[NODE_KEY];\n    graph.edges[i] = edge;\n\n    this.setState({ graph: graph });\n  };\n\n  // Called when an edge is deleted\n  onDeleteEdge = viewEdge => {\n    const graph = this.state.graph;\n    const i = this.getEdgeIndex(viewEdge);\n    graph.edges.splice(i, 1);\n    this.setState({ graph: graph, selected: {} });\n  };\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n\n    return (\n      <div id=\"graph\" style={styles.graph}>\n        <GraphView\n          ref=\"GraphView\"\n          nodeKey={NODE_KEY}\n          emptyType={EMPTY_TYPE}\n          nodes={nodes}\n          edges={edges}\n          selected={selected}\n          nodeTypes={NodeTypes}\n          nodeSubtypes={NodeSubtypes}\n          edgeTypes={EdgeTypes}\n          getViewNode={this.getViewNode}\n          onSelectNode={this.onSelectNode}\n          onCreateNode={this.onCreateNode}\n          onUpdateNode={this.onUpdateNode}\n          onDeleteNode={this.onDeleteNode}\n          onSelectEdge={this.onSelectEdge}\n          onCreateEdge={this.onCreateEdge}\n          onSwapEdge={this.onSwapEdge}\n          onDeleteEdge={this.onDeleteEdge}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n","import React, { Component } from \"react\";\nimport Graph from \"./Graph\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Graph />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}